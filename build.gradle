import java.util.jar.JarEntry
import java.util.jar.JarFile

group = 'com.stehno'
version = '0.1-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
    }
}

apply plugin:'izpack'
apply plugin:'groovy'
apply plugin:'application'
apply plugin:NativesPlugin

compileJava {
	sourceCompatibility = '1.7'
	targetCompatibility = '1.7'

	doLast {
        project.unpackNatives.execute()
    }
}

mainClassName = 'com.stehno.starhunter.StarHunter'

repositories {
	mavenLocal()
	jcenter()
}

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.2.1:indy'

	compile "org.lwjgl.lwjgl:lwjgl:$lwjglVersion"
    compile 'org.jcraft:jorbis:0.0.17'

    compile 'org.newdawn.slick:slick:0.1' // had to add by hand

    // Testing

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'

    // Installer

    izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.4'
}

test {
    systemProperty 'java.library.path', file( "build/natives/$platform" )
}

run {
    systemProperty 'java.library.path', file( "build/natives/$platform" )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

// Distribution and Installation

applicationDistribution.from( file( "build/natives/$platform" ) ){
    into 'bin/natives/3rdparty'
}

startScripts {
    // Need to edit the bat file for the library path - injected by installer
    doLast {
        windowsScript.text = windowsScript.text.replace(
            'set DEFAULT_JVM_OPTS=',
            'set DEFAULT_JVM_OPTS=-Djava.library.path=$INSTALL_PATH\\$NATIVE_PATH\\'
        )
    }
}

izpack {
    baseDir = file("$buildDir/install/starhunter")
    installFile = file('src/installer/installer.xml')
    compression = 'deflate'
    compressionLevel = 9
}

//
// Natives
//


natives {
    jars = [
        "lwjgl-platform-${lwjglVersion}-natives-${platform}.jar",
        "jinput-platform-${jInputVersion}-natives-${platform}.jar"
    ]
    libraryExtension = '.dll'
    targetPlatform = platform
}

class NativesPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.extensions.create( 'natives', NativesPluginExtension)

        project.task( 'unpackNatives', dependsOn:'build' ) << {
            project.mkdir project.file("build/natives/${project.natives.targetPlatform}")
            logger.info 'Unpacking ({}) native libraries into {}...', project.natives.targetPlatform, project.file("build/natives/${project.natives.targetPlatform}")

            // annoying side-effect of GStrings
            def nativeJars = project.natives.jars*.toString()

            project.files( project.configurations.compile ).findAll { jf-> jf.name in nativeJars }.each { njf->
                logger.info 'Unpacking {}...', njf

                JarFile jarFile = new JarFile(njf)
                jarFile.entries().findAll { JarEntry je-> je.name.endsWith(project.natives.libraryExtension) }.each { JarEntry jef->
                    logger.info 'Unpacking: {}', jef.name
                    project.file("build/natives/${project.natives.targetPlatform}/${jef.name}").bytes = jarFile.getInputStream(jef).bytes
                }
            }
        }
    }
}

class NativesPluginExtension {
    Collection<String> jars
    String libraryExtension
    String targetPlatform
}
